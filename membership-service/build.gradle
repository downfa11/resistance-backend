plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.palantir.docker' version '0.35.0'
}

group = 'com.ns.membership'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'org.jetbrains:annotations:23.0.0'
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'junit:junit:4.13.1'

    implementation project(path: ':common')
    //Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    //json
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    //Vault
    implementation group: 'org.springframework.vault',name: 'spring-vault-core',version:'3.0.2'

    //Mail (Google SMTP)
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '3.0.5'

    //QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"


    // OAuth2-client
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'


}

// QueryDSL
// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

docker {
    println(tasks.bootJar.outputs.files)
    name project.name+":"+version
    dockerfile file('../Dockerfile')
    files tasks.bootJar.outputs.files
    buildArgs(['JAR_FILE':tasks.bootJar.outputs.files.singleFile.name])
}

//bootJar {
//    archiveFileName = "${project.name}.jar"
//}